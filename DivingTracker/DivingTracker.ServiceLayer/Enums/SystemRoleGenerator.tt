<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension=".generated.cs" #>
<#@ Assembly Name="System.Data" #>
<#@ Assembly name="EnvDTE" #>
<#@ import namespace="EnvDTE" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Data.SqlClient" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Runtime.Remoting.Messaging" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#
	string connectionString = $"Data Source={Environment.MachineName};Initial Catalog=DivingTracker;Integrated Security=True";
	string tableName = "SystemRoles";
	string columnId = "SystemRoleId";
	string columnName = "Description";
	string path = Path.GetDirectoryName(Host.TemplateFile);
#>
// This is a generated file. Do not attempt to modify it as your changes would be overwritten.
// Connection String Used: <#= connectionString #>
using System.CodeDom.Compiler;
using System.ComponentModel;

namespace DivingTracker.ServiceLayer.Enums
{
<#	
	var serviceProvider = Host as IServiceProvider;
	var dte = serviceProvider.GetService(typeof(DTE)) as DTE;

	SqlConnection conn = new SqlConnection(connectionString);
    string command = string.Format("select {0}, {1} from {2} order by {0}", columnId, columnName, tableName);
    SqlCommand comm = new SqlCommand(command, conn);
 
    conn.Open();
 
    SqlDataReader reader = comm.ExecuteReader();
    bool loop = reader.Read();
#>
    /// <summary>
    /// <#= tableName #> auto generated enumeration
    /// </summary>
    [GeneratedCode("TextTemplatingFileGenerator", "10")]
    public enum <#= tableName #> : byte
    {
<#
    while(loop)
    {
#>        /// <summary>
        /// <#= reader[columnName] #> (<#= reader[columnId] #>)
        /// </summary>
		[Description("<#= reader[columnName] #>")]
        <#= Pascalize(reader[columnName]) #> = <#= reader[columnId] #><# loop = reader.Read(); #><#= loop ? ",\r\n" : string.Empty #>
<#
    }
#>	}
}
<#+
    private string Pascalize(object value)
    {
        Regex rx = new Regex(@"(?:[^a-zA-Z0-9]*)(?<first>[a-zA-Z0-9])(?<reminder>[a-zA-Z0-9]*)(?:[^a-zA-Z0-9]*)");
        return rx.Replace(value.ToString(), m => m.Groups["first"].ToString().ToUpper() + m.Groups["reminder"].ToString().ToLower());
    }
#>